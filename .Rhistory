for(j in 1:11){
if (j>i)
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
jagsmodelSMSC <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1] + (b[2]+u[subj[i],2])*age[i]+(b[3]+u[subj[i],3])*disease.duration[i]+
(b[4]+u[subj[i],4])*edss+(b[5]+u[subj[i],5])*nr.Gd.enhanced.lesions+(b[6]+u[subj[i],6])*nr.relapses.2y.prior.study+
(b[7]+u[subj[i],7])*months.since.last.relapse+(b[8]+u[subj[i],8])*treatment.naive.prior.visit +
(b[9]+u[subj[i],9])*gender+
(b[10]+u[subj[i],10])*treatment.during.cycle+ (b[11]+u[subj[i],11])*treatment.time.during.cycle.months+h[i]
h[i]~dnorm(0,tau.h)
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
for (i in 1:(npf+1)){
b[i]~dnorm(0,0.001)
}
for(i in 1:(npf+1)){
zero[i]<-0
}
for (i in 1:npid){
u[i,1:(npf+1)]~dmnorm(zero, Omega.u)
}
##fill in the R.u
R.u[1,1]<-sigma[1]^2
R.u[2,2]<-sigma[2]^2
R.u[3,3]<-sigma[3]^2
R.u[4,4]<-sigma[4]^2
R.u[5,5]<-sigma[5]^2
R.u[6,6]<-sigma[6]^2
R.u[7,7]<-sigma[7]^2
R.u[8,8]<-sigma[8]^2
R.u[9,9]<-sigma[9]^2
R.u[10,10]<-sigma[10]^2
R.u[11,11]<-sigma[11]^2
for (i in (1:11)){
for(j in 1:11){
if (j>i)
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
#priors for varying intercept and slopes
for(i in (1:(npf+1))){
sigma[i]~dunif(0,10)
}
#prior for correlation
rho.u~dunif(-1,1)
#prior on precision Omega.u
Omega.u~dwish(R.u,(npf+1))
# priors for variance
tau.h<-pow(sigma.h, -2)
sigma.h~dunif(0,100)
}
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
for(j in 3:11){
R.u[1,j]<-rho.u*sigma[i]*sigma[j]
}
R.u<-matrix(, nrow = 11, ncol = 11)
##fill in the R.u
R.u[1,1]<-sigma[1]^2
R.u[2,2]<-sigma[2]^2
R.u[3,3]<-sigma[3]^2
R.u[4,4]<-sigma[4]^2
R.u[5,5]<-sigma[5]^2
R.u[6,6]<-sigma[6]^2
R.u[7,7]<-sigma[7]^2
R.u[8,8]<-sigma[8]^2
R.u[9,9]<-sigma[9]^2
R.u[10,10]<-sigma[10]^2
R.u[11,11]<-sigma[11]^2
R.u
for(j in 2:11){
R.u[1,j]<-rho.u*sigma[i]*sigma[j]
}
R.u
for(j in 3:11){
R.u[2,j]<-rho.u*sigma[i]*sigma[j]
}
R.u
for(i in 1:11)
for(i in 1:11) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
for(j in 3:11){
R.u[2,j]<-rho.u*sigma[i]*sigma[j]
}
for(j in 4:11){
R.u[3,j]<-rho.u*sigma[i]*sigma[j]
}
for(j in 3:11){
R.u[1,j]<-rho.u*sigma[i]*sigma[j]
}
for(j in 3:11){
R.u[1,j]<-rho.u*sigma[i]*sigma[j]
}
for(j in 3:11){
R.u[1,j]<-rho.u*sigma[i]*sigma[j]
}
for(j in 3:11){
R.u[1,j]<-rho.u*sigma[i]*sigma[j]
}
for(j in 3:11){
R.u[1,j]<-rho.u*sigma[i]*sigma[j]
}
#priors for varying intercept and slopes
for(i in (1:(npf+1))){
sigma[i]~dunif(0,10)
}
#prior for correlation
rho.u~dunif(-1,1)
#prior on precision Omega.u
Omega.u~dwish(R.u,(npf+1))
# priors for variance
tau.h<-pow(sigma.h, -2)
sigma.h~dunif(0,100)
}
for(i in 1:11) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
R.u<-matrix(, nrow = 11, ncol = 11)
##fill in the R.u
R.u[1,1]<-sigma[1]^2
R.u[2,2]<-sigma[2]^2
R.u[3,3]<-sigma[3]^2
R.u[4,4]<-sigma[4]^2
R.u[5,5]<-sigma[5]^2
R.u[6,6]<-sigma[6]^2
R.u[7,7]<-sigma[7]^2
R.u[8,8]<-sigma[8]^2
R.u[9,9]<-sigma[9]^2
R.u[10,10]<-sigma[10]^2
R.u[11,11]<-sigma[11]^2
for(i in 1:11) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
R.u
for (i in 2:11){
for(j in (1:(i-1))){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
#priors for varying intercept and slopes
for(i in (1:(npf+1))){
sigma[i]~dunif(0,10)
}
#prior for correlation
rho.u~dunif(-1,1)
#prior on precision Omega.u
Omega.u~dwish(R.u,(npf+1))
# priors for variance
tau.h<-pow(sigma.h, -2)
sigma.h~dunif(0,100)
}
for (i in 2:11){
for(j in (1:(i-1))){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
R.u
R.u<-matrix(, nrow = 11, ncol = 11)
for(i in 1:11) {
R.u[i,i]<-sigma[i]*sigma[i]
}
R.u
for(i in 1:11) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
for (i in 2:11){
for(j in (1:(i-1))){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
R.u
for(i in 1:10) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
R.u<-matrix(, nrow = 11, ncol = 11)
for(i in 1:11) {
R.u[i,i]<-sigma[i]*sigma[i]
}
for(i in 1:10) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
for (i in 2:11){
for(j in (1:(i-1))){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
R.u
jagsmodelSMSC <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1] + (b[2]+u[subj[i],2])*age[i]+(b[3]+u[subj[i],3])*disease.duration[i]+
(b[4]+u[subj[i],4])*edss+(b[5]+u[subj[i],5])*nr.Gd.enhanced.lesions+(b[6]+u[subj[i],6])*nr.relapses.2y.prior.study+
(b[7]+u[subj[i],7])*months.since.last.relapse+(b[8]+u[subj[i],8])*treatment.naive.prior.visit +
(b[9]+u[subj[i],9])*gender+
(b[10]+u[subj[i],10])*treatment.during.cycle+ (b[11]+u[subj[i],11])*treatment.time.during.cycle.months+h[i]
h[i]~dnorm(0,tau.h)
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
for (i in 1:(npf+1)){
b[i]~dnorm(0,0.001)
}
for(i in 1:(npf+1)){
zero[i]<-0
}
for (i in 1:npid){
u[i,1:(npf+1)]~dmnorm(zero, Omega.u)
}
##fill in the R.u
R.u[1,1]<-sigma[1]^2
R.u[2,2]<-sigma[2]^2
R.u[3,3]<-sigma[3]^2
R.u[4,4]<-sigma[4]^2
R.u[5,5]<-sigma[5]^2
R.u[6,6]<-sigma[6]^2
R.u[7,7]<-sigma[7]^2
R.u[8,8]<-sigma[8]^2
R.u[9,9]<-sigma[9]^2
R.u[10,10]<-sigma[10]^2
R.u[11,11]<-sigma[11]^2
for(i in 1:11) {
R.u[i,i]<-sigma[i]*sigma[i]
}
for(i in 1:10) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
for (i in 2:11){
for(j in (1:(i-1))){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
#priors for varying intercept and slopes
for(i in (1:(npf+1))){
sigma[i]~dunif(0,10)
}
#prior for correlation
rho.u~dunif(-1,1)
#prior on precision Omega.u
Omega.u~dwish(R.u,(npf+1))
# priors for variance
tau.h<-pow(sigma.h, -2)
sigma.h~dunif(0,100)
}
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
jagsmodelSMSC <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1] + (b[2]+u[subj[i],2])*age[i]+(b[3]+u[subj[i],3])*disease.duration[i]+
(b[4]+u[subj[i],4])*edss+(b[5]+u[subj[i],5])*nr.Gd.enhanced.lesions+(b[6]+u[subj[i],6])*nr.relapses.2y.prior.study+
(b[7]+u[subj[i],7])*months.since.last.relapse+(b[8]+u[subj[i],8])*treatment.naive.prior.visit +
(b[9]+u[subj[i],9])*gender+
(b[10]+u[subj[i],10])*treatment.during.cycle+ (b[11]+u[subj[i],11])*treatment.time.during.cycle.months+h[i]
h[i]~dnorm(0,tau.h)
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
for (i in 1:(npf+1)){
b[i]~dnorm(0,0.001)
}
for(i in 1:(npf+1)){
zero[i]<-0
}
for (i in 1:npid){
u[i,1:(npf+1)]~dmnorm(zero, Omega.u)
}
##fill in the R.u
for(i in 1:11) {
R.u[i,i]<-sigma[i]*sigma[i]
}
for(i in 1:10) {
for(j in (i+1):11){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
for (i in 2:11){
for(j in (1:(i-1))){
R.u[i,j]<-rho.u*sigma[i]*sigma[j]
}
}
#priors for varying intercept and slopes
for(i in (1:(npf+1))){
sigma[i]~dunif(0,10)
}
#prior for correlation
rho.u~dunif(-1,1)
#prior on precision Omega.u
Omega.u~dwish(R.u,(npf+1))
# priors for variance
tau.h<-pow(sigma.h, -2)
sigma.h~dunif(0,100)
}
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
subj=SMSCdataC$NumericID
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=SMSCdataC$outcome,
npf=10,
npid=length(unique(SMSCdataC$patient.id)),
#subj=sort(as.integer((SMSCdataC$NumericID))),
subj=SMSCdataC$NumericID,
age=SMSCdataC$age,
disease.duration=SMSCdataC$disease.duration,
edss=SMSCdataC$edss,
nr.Gd.enhanced.lesions=SMSCdataC$nr.Gd.enhanced.lesions,
nr.relapses.2y.prior.study=SMSCdataC$nr.relapses.2y.prior.study,
months.since.last.relapse=SMSCdataC$months.since.last.relapse,
treatment.naive.prior.visit=SMSCdataC$treatment.naive.prior.visit ,
gender=as.factor(SMSCdataC$gender),
treatment.during.cycle =as.factor(SMSCdataC$treatment.during.cycle),
treatment.time.during.cycle.months=SMSCdataC$treatment.time.during.cycle.months
)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=SMSCdataC$outcome,
npf=10,
npid=length(unique(SMSCdataC$patient.id)),
#subj=sort(as.integer((SMSCdataC$NumericID))),
subj=SMSCdataC$patient.id,
age=SMSCdataC$age,
disease.duration=SMSCdataC$disease.duration,
edss=SMSCdataC$edss,
nr.Gd.enhanced.lesions=SMSCdataC$nr.Gd.enhanced.lesions,
nr.relapses.2y.prior.study=SMSCdataC$nr.relapses.2y.prior.study,
months.since.last.relapse=SMSCdataC$months.since.last.relapse,
treatment.naive.prior.visit=SMSCdataC$treatment.naive.prior.visit ,
gender=as.factor(SMSCdataC$gender),
treatment.during.cycle =as.factor(SMSCdataC$treatment.during.cycle),
treatment.time.during.cycle.months=SMSCdataC$treatment.time.during.cycle.months
)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=SMSCdataC$outcome,
npf=10,
npid=length(unique(SMSCdataC$patient.id)),
#subj=sort(as.integer((SMSCdataC$NumericID))),
subj=SMSCdataC$NumericID,
age=SMSCdataC$age,
disease.duration=SMSCdataC$disease.duration,
edss=SMSCdataC$edss,
nr.Gd.enhanced.lesions=SMSCdataC$nr.Gd.enhanced.lesions,
nr.relapses.2y.prior.study=SMSCdataC$nr.relapses.2y.prior.study,
months.since.last.relapse=SMSCdataC$months.since.last.relapse,
treatment.naive.prior.visit=SMSCdataC$treatment.naive.prior.visit ,
gender=as.factor(SMSCdataC$gender),
treatment.during.cycle =as.factor(SMSCdataC$treatment.during.cycle),
treatment.time.during.cycle.months=SMSCdataC$treatment.time.during.cycle.months
)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
as.vector(SMSCdataC$NumericID)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=SMSCdataC$outcome,
npf=10,
npid=length(unique(SMSCdataC$patient.id)),
#subj=sort(as.integer((SMSCdataC$NumericID))),
subj=as.vector(SMSCdataC$NumericID),
age=SMSCdataC$age,
disease.duration=SMSCdataC$disease.duration,
edss=SMSCdataC$edss,
nr.Gd.enhanced.lesions=SMSCdataC$nr.Gd.enhanced.lesions,
nr.relapses.2y.prior.study=SMSCdataC$nr.relapses.2y.prior.study,
months.since.last.relapse=SMSCdataC$months.since.last.relapse,
treatment.naive.prior.visit=SMSCdataC$treatment.naive.prior.visit ,
gender=as.factor(SMSCdataC$gender),
treatment.during.cycle =as.factor(SMSCdataC$treatment.during.cycle),
treatment.time.during.cycle.months=SMSCdataC$treatment.time.during.cycle.months
)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
as.integr(factor(SMSCdataC$patient.id))
as.integer(factor(SMSCdataC$patient.id))
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=SMSCdataC$outcome,
npf=10,
npid=length(unique(SMSCdataC$patient.id)),
#subj=sort(as.integer((SMSCdataC$NumericID))),
subj=as.integer(factor(SMSCdataC$patient.id)),
age=SMSCdataC$age,
disease.duration=SMSCdataC$disease.duration,
edss=SMSCdataC$edss,
nr.Gd.enhanced.lesions=SMSCdataC$nr.Gd.enhanced.lesions,
nr.relapses.2y.prior.study=SMSCdataC$nr.relapses.2y.prior.study,
months.since.last.relapse=SMSCdataC$months.since.last.relapse,
treatment.naive.prior.visit=SMSCdataC$treatment.naive.prior.visit ,
gender=as.factor(SMSCdataC$gender),
treatment.during.cycle =as.factor(SMSCdataC$treatment.during.cycle),
treatment.time.during.cycle.months=SMSCdataC$treatment.time.during.cycle.months
)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
as.integer(factor(SMSCdataC$patient.id))
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
##########################################################
############### LIBRARIES #################################
### Load needed variables
library(readxl)
library(dplyr)
library(rms)
#library(gee)
library(lme4)
library(R2jags)
# give/change your datapath (the datapath that includes the data)
mydatapath="C:/Users/kc19o338/Desktop/SMSC Basel"
# function that keeps only the needed variables (selected via pre-existing prognostic models on the literature, for RRMS patients)
# and makses the proper transformations for continues and categorical variables
# (in case you want to see all summary statistics for the SMSC data before and after the transformations you can run the SMSC_Summary.R script)
source("R/FinalDataSMSC.fun.R")
SMSCdata<-FinalDataSMSC.fun(mydatapath)
# the dataset with complete cases only, no missing values at all
SMSCdataC<-na.omit(SMSCdata)
#create a variable that indicates the cycle of the patient (i.e. 1st cycle, 2nd cycle, 3rd cycle, etc.) for the complete dataset
SMSCdataC$cycle <- ave(SMSCdataC$unique.visit.id, SMSCdataC$patient.id,  FUN = seq_along)
#create a column with patient ids as numeric for the complete dataset
SMSCdataC$NumericID <- as.numeric(factor(SMSCdataC$patient.id,
levels=unique(SMSCdataC$patient.id)))
# just a test using generalized linear mixed effects model in a frequentist setting
source("R/Frequentist_glmm.fun.R")
glmmModel<-Frequentist_glmm.fun(SMSCdataC)
#the results of the mixed-effects model
summary(glmmModel$glmer_out) #message that the model failed to converge
source("R/jagsmodelSMSC.R")
# run the jugs model
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
##########################################################
############### LIBRARIES #################################
### Load needed variables
library(readxl)
library(dplyr)
library(rms)
#library(gee)
library(lme4)
library(R2jags)
# give/change your datapath (the datapath that includes the data)
mydatapath="C:/Users/kc19o338/Desktop/SMSC Basel"
# function that keeps only the needed variables (selected via pre-existing prognostic models on the literature, for RRMS patients)
# and makses the proper transformations for continues and categorical variables
# (in case you want to see all summary statistics for the SMSC data before and after the transformations you can run the SMSC_Summary.R script)
source("R/FinalDataSMSC.fun.R")
SMSCdata<-FinalDataSMSC.fun(mydatapath)
# the dataset with complete cases only, no missing values at all
SMSCdataC<-na.omit(SMSCdata)
#create a variable that indicates the cycle of the patient (i.e. 1st cycle, 2nd cycle, 3rd cycle, etc.) for the complete dataset
SMSCdataC$cycle <- ave(SMSCdataC$unique.visit.id, SMSCdataC$patient.id,  FUN = seq_along)
#create a column with patient ids as numeric for the complete dataset
SMSCdataC$NumericID <- as.numeric(factor(SMSCdataC$patient.id,
levels=unique(SMSCdataC$patient.id)))
# just a test using generalized linear mixed effects model in a frequentist setting
source("R/Frequentist_glmm.fun.R")
glmmModel<-Frequentist_glmm.fun(SMSCdataC)
#the results of the mixed-effects model
summary(glmmModel$glmer_out) #message that the model failed to converge
# compare them with a model with fixed effects only (glm)
summary(glmmModel$glm_out)
##### Read the data needed for the jags model
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=SMSCdataC$outcome,
npf=10,
npid=length(unique(SMSCdataC$patient.id)),
#subj=sort(as.integer((SMSCdataC$NumericID))),
subj=as.integer(factor(SMSCdataC$patient.id)),
age=SMSCdataC$age,
disease.duration=SMSCdataC$disease.duration,
edss=SMSCdataC$edss,
nr.Gd.enhanced.lesions=SMSCdataC$nr.Gd.enhanced.lesions,
nr.relapses.2y.prior.study=SMSCdataC$nr.relapses.2y.prior.study,
months.since.last.relapse=SMSCdataC$months.since.last.relapse,
treatment.naive.prior.visit=SMSCdataC$treatment.naive.prior.visit ,
gender=as.factor(SMSCdataC$gender),
treatment.during.cycle =as.factor(SMSCdataC$treatment.during.cycle),
treatment.time.during.cycle.months=SMSCdataC$treatment.time.during.cycle.months
)
source("R/jagsmodelSMSC.R")
# run the jugs model
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
