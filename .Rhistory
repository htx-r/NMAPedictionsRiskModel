###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA.R')
####RUN the model
IPDADNMAJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
####RUN the model
IPDADNMAJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(metafor)
library(meta)
library(netmeta)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, etc.
source('DataForIPDNMR.R')
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSmodelLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA.R')
####RUN the model
IPDADNMAJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
source("modelIPDADNMA.R")
source("R/modelIPDADNMA.R")
####RUN the model
IPDADNMAJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, etc.
source('DataForIPDNMR.R')
source("R/modelIPDNMR.R")
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSmodelLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
# Results using LASSO model
print(IPDNMRJAGSmodelLASSO,varname=c("gamma.w","ORref","u","delta"))
################################################## B. NMR model with only prognostic factor #################################################################
# Here we make the data for jags (for all the models)
source('DataForIPDADNMR.R')
################################################## B. NMR model with only prognostic factor #################################################################
# Here we make the data for jags (for all the models)
source('DataForIPDADNMR.R')
################################################## B. NMR model with only prognostic factor #################################################################
# Here we make the data for jags (for all the models)
source('DataForIPDADNMR.R')
####################################### Meta-regression to see what is the problem with the uis ###############################
source('DataForIPDADMA.R')
source("R/modelIPDADMA.R")
IPDADMAJAGSmodel <- jags.parallel(data = jagsdataIPDADMA ,inits=NULL,parameters.to.save = c('u','ORref',"mean"),model.file =modelIPDADMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA.R')
source("R/modelIPDADNMA.R")
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMR.R')
source("R/modelIPDADNMA.R")
####RUN the model
IPDADNMAJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMAJAGSmodel
#check the results with netmeta
source('CheckNMA.R')
summary(net1, digits = 2)
####################################### Meta-regression to see what is the problem with the uis ###############################
source("R/modelIPDADMA.R") #source the model will be used for rjags
IPDADMAJAGSmodel <- jags.parallel(data = jagsdataIPDADMA ,inits=NULL,parameters.to.save = c('u','ORref',"mean"),model.file =modelIPDADMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
####################################### Meta-regression to see what is the problem with the uis ###############################
source("R/modelIPDADMA.R") #source the model will be used for rjags
IPDADMAJAGSmodel <- jags.parallel(data = jagsdataIPDADMA ,inits=NULL,parameters.to.save = c('u','ORref',"delta"),model.file =modelIPDADMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
IPDADMAJAGSmodel <- jags.parallel(data = jagsdataIPDADMA ,inits=NULL,parameters.to.save = c("delta",'u','ORref'),model.file =modelIPDADMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADMAJAGSmodel
IPDADMAJAGSmodel <- jags.parallel(data = jagsdataIPDADMA ,inits=NULL,parameters.to.save = c("delta",'u','OR'),model.file =modelIPDADMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADMAJAGSmodel
#results
IPDADNMAJAGSmodel
source("modelIPDADNMRPr") #source the model will be used for rjags
source("R/modelIPDADNMRPr.R") #source the model will be used for rjags
####RUN the model
IPDADNMRPrJAGSmodel <- jags.parallel(data = jagsdataIPDADNMRPr ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma'),model.file = modelIPDADNMRPr,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMRPrJAGSmodel
#check the results with IPD NMR model
source('CheckNMRPr.R')
#check the results with IPD NMR model
source('CheckNMRPr.R')
#check the results with IPD NMR model
source('CheckNMRPr.R')
IPDNMRJAGSmodelPreSpecified
#results
IPDADNMRPrJAGSmodel
source("R/modelIPDADNMREMwithin.R") #source the model will be used for rjags
####RUN the model
IPDADNMREMwithinJAGSmodel <- jags.parallel(data =jagsdataIPDADNMREMwithin ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.w'),model.file = modelIPDADNMRgwithinonly,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
####RUN the model
IPDADNMREMwithinJAGSmodel <- jags.parallel(data =jagsdataIPDADNMREMwithin ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.w'),model.file = modelIPDADNMREMwithin,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMREMwithinJAGSmodel
#check the results with the corresponding IPD NMR model
source('CheckNMREMwithin.R')
#check the results with the corresponding IPD NMR model
source('CheckNMREMwithin.R')
jagsdataIPDNMRPrespecified<- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=logitRisknew,
logitmeanRisknew=-0.545,
Nnew=99,
arm=RiskData$arm,
Risk=RiskData$logitRiskPrespecified,
meanRisk=c(tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
##here is the mean of logit of risk
nt=4,
ref=4
)
source("R/modelIPDNMREMwithin.R")#source the model will be used for rjags
IPDNMRJAGSmodelPrespecified <- jags.parallel(data = jagsdataIPDNMRPrespecified,inits=NULL,parameters.to.save = c('gamma.w','gamma', 'ORref','delta','u'),model.file = modelIPDNMREMwithin,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
jagsdataIPDNMRPrespecified<- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=logitRisknew,
logitmeanRisknew=-0.545,
Nnew=99,
arm=RiskData$arm,
Risk=RiskData$logitRiskPreSpecified,
meanRisk=c(tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
##here is the mean of logit of risk
nt=4,
ref=4
)
source("R/modelIPDNMREMwithin.R")#source the model will be used for rjags
IPDNMRJAGSmodelPrespecified <- jags.parallel(data = jagsdataIPDNMRPrespecified,inits=NULL,parameters.to.save = c('gamma.w','gamma', 'ORref','delta','u'),model.file = modelIPDNMREMwithin,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
#check the results with the corresponding IPD NMR model
source('CheckNMREMwithin.R')
#results
IPDADNMREMwithinJAGSmodel
IPDNMRJAGSmodelPrespecified
source("R/modelIPDADNMR.R") #source the model will be used for rjags
####RUN the model
IPDADNMRJAGSmodel <- jags.parallel(data = jagsdataIPDADNMR ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.b','gamma.w'),model.file = modelIPDADNMR,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMRJAGSmodel
#########################   END    #################################################################
rm(list=ls())
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(metafor)
library(meta)
library(netmeta)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, and make data for jags model etc.
source('DataForIPDNMR.R')
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMR.R')
source("R/modelIPDADNMA.R")#source the model will be used for rjags
####RUN the model
IPDADNMAJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMAJAGSmodel
#check the results with netmeta
source('CheckNMA.R')
summary(net1, digits = 2)
forest(net1,ref=4,fontsize=10)
source("R/modelIPDADMA.R") #source the model will be used for rjags
IPDADMAJAGSmodel <- jags.parallel(data = jagsdataIPDADMA ,inits=NULL,parameters.to.save = c("delta",'u'),model.file =modelIPDADMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADMAJAGSmodel
source("R/modelIPDADNMRPr.R") #source the model will be used for rjags
####RUN the model
IPDADNMRPrJAGSmodel <- jags.parallel(data = jagsdataIPDADNMRPr ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma'),model.file = modelIPDADNMRPr,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMRPrJAGSmodel
#check the results with IPD NMR model
source('CheckNMRPr.R')
IPDNMRJAGSmodelPreSpecified
source("R/modelIPDADNMREMwithin.R") #source the model will be used for rjags
####RUN the model
IPDADNMREMwithinJAGSmodel <- jags.parallel(data =jagsdataIPDADNMREMwithin ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.w'),model.file = modelIPDADNMREMwithin,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMREMwithinJAGSmodel
#check the results with the corresponding IPD NMR model
source('CheckNMREMwithin.R')
IPDNMRJAGSmodelPrespecified
source("R/modelIPDADNMR.R") #source the model will be used for rjags
####RUN the model
IPDADNMRJAGSmodel <- jags.parallel(data = jagsdataIPDADNMR ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.b','gamma.w'),model.file = modelIPDADNMR,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMRJAGSmodel
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(metafor)
library(meta)
library(netmeta)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
source("R/numericalDataRisk.fun.R")
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source("R/RiskModels.fun.R")
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, and make data for jags model etc.
source('DataForIPDNMR.R')
source("R/modelIPDNMR.R") #source the model will be used for rjags
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSmodelLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSmodelLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSreaultsLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSresultsLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
IPDNMRJAGSresultsPreSpecified <- jags.parallel(data = jagsdataIPDNMRPreSpecified,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
# Results using LASSO model
print(IPDNMRJAGSresultsLASSO,varname=c("gamma.w","ORref","u","delta"))
# Results using Pellegrini's model
print(IPDNMRJAGSresultsPreSpecified,varname=c("gamma.w","ORref","u","delta"))
traceplot(IPDNMRJAGSresultsLASSO$BUGSoutput,varname=c("ORref","u", "gamma.w", "gamma"))
#Step 3. Plot of IPD NMR with both models
source('GraphForPredictedRisk.R')
############################ All tables and figures of presented in the paper #########################
source('Paper - Tables and Figures.R')
############################ All tables and figures of presented in the paper #########################
source('Paper - Tables and Figures.R')
#Table 1
AFFIRM
CONFIRM
DEFINE
Placebo
#Table 2
Table_LASSOModel
Table_PreSpecifiedModel
IPDNMR_Table
#Table 4
##predicted probabilities to relapse in 2 years
round(LASSOtable,0) #for LASSO model
round(PreSpecifiedtable,0) #for pre-specified model
###ORs of relapsing in 2 years
round(LASSOtableOR,2) #for LASSO model
round(PreSpecifiedtableOR,2) #for pre-specified model
#Figure 1
ggarrange(PrognosticRiskLASSO,PrognosticRiskPreSpecified,ncol = 1,nrow = 2,labels = c("A  LASSO model","B  Pre-specified model"), hjust=-0.2,font.label = list(size = 11))
#Figure 2
ggarrange(IPDplotLASSO,IPDplotPreSpecified,ncol = 1,nrow = 2,labels = c("A","B"),font.label = list(size = 11))
#Appendix figure 1
ggarrange(IPDplotLASSO_OR,IPDplotPreSpecified_OR,ncol = 1,nrow = 2,labels = c("A","B"),font.label = list(size = 11))
#Appendix figure 3
Flowchart
############################# R-shiny app ##################################################################
source('R-shiny.R')
View(GraphdataF)
############################# R-shiny app ##################################################################
source('R-shiny.R') #here you have to change the path of the data
############################# R-shiny app ##################################################################
source('R-shiny.R') #here you have to change the path of the data
############################# R-shiny app ##################################################################
source('R-shiny.R') #here you have to change the path of the data
############################# R-shiny app ##################################################################
source('R-shiny.R') #here you have to change the path of the data
shinyApp(ui = ui, server = server) #also available in https://cinema.ispm.unibe.ch/shinies/koms/
GraphdataF<-read_csv("C:/Users/kc19o338/shinies/apps/koms/Data_for_the_Graph7.csv")
############################# R-shiny app ##################################################################
source('R-shiny.R') #here you have to change the path of the data
shinyApp(ui = ui, server = server) #also available in https://cinema.ispm.unibe.ch/shinies/koms/
############################# R-shiny app ##################################################################
source('R-shiny.R') #here you have to change the path of the data
shinyApp(ui = ui, server = server) #also available in https://cinema.ispm.unibe.ch/shinies/koms/
# Here we load the AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMR.R')
source("R/modelIPDADNMA.R")#source the model will be used for rjags
####RUN the model
IPDADNMAJAGSresults <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMAJAGSresults
#check the results with netmeta
source('CheckNMA.R')
summary(net1, digits = 2)
forest(net1,ref=4,fontsize=10)
source("R/modelIPDADMA.R") #source the model will be used for rjags
IPDADMAJAGSresults <- jags.parallel(data = jagsdataIPDADMA ,inits=NULL,parameters.to.save = c("delta",'u'),model.file =modelIPDADMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADMAJAGSresults
source("R/modelIPDADNMRPr.R") #source the model will be used for rjags
####RUN the model
IPDADNMRPrJAGSresults<- jags.parallel(data = jagsdataIPDADNMRPr ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma'),model.file = modelIPDADNMRPr,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMRPrJAGSresults
#check the results with IPD NMR model
source('CheckNMRPr.R')
IPDNMRJAGSresultsPreSpecified
source("R/modelIPDADNMREMwithin.R") #source the model will be used for rjags
####RUN the model
IPDADNMREMwithinJAGSresults <- jags.parallel(data =jagsdataIPDADNMREMwithin ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.w'),model.file = modelIPDADNMREMwithin,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#results
IPDADNMREMwithinJAGSresults
#check the results with the corresponding IPD NMR model
source('CheckNMREMwithin.R')
IPDNMRJAGSresultsPrespecified
source("R/modelIPDADNMR.R") #source the model will be used for rjags
####RUN the model
IPDADNMRJAGSresults <- jags.parallel(data = jagsdataIPDADNMR ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.b','gamma.w'),model.file = modelIPDADNMR,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#########################   END    #################################################################
rm(list=ls())
