npid=length(unique(SMSCdataC$patient.id)),
subj=as.numeric(factor(SMSCdataC$patient.id))
)
jagsmodelSMSC2 <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
for (i in 1:npid){
u[i,1]~dnorm(zero,1/sigma*sigma) #precision matrix
}
sigma~dunif(0,10)
}
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1,
npid=length(unique(SMSCdataC$patient.id)),
subj=as.numeric(factor(SMSCdataC$patient.id))
)
jagsmodelSMSC2 <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
for (i in 1:npid){
u[i,1]~dnorm(zero,1/sigma*sigma) #precision matrix
}
sigma~dunif(0,10)
}
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
dimnames(SMSCdataC)
dimnames(jagsdataSMSC)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1,
npid=length(unique(SMSCdataC$patient.id)),
subj=as.numeric(factor(SMSCdataC$patient.id))
)
dimnames(jagsdataSMSC)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
SMSCjagsResults <- jags2(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
SMSCjagsResults
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1,
npid=length(unique(SMSCdataC$patient.id)),
subj=as.numeric(factor(SMSCdataC$patient.id))
)
dimname(jagsdataSMSC)<-c("Nobservations","outcome","npid","subj")
dimnames(jagsdataSMSC)<-c("Nobservations","outcome","npid","subj")
dimnames(jagsdataSMSC)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1,
npid=length(unique(SMSCdataC$patient.id)),
subj=as.numeric(factor(SMSCdataC$patient.id))
)
jagsmodelSMSC2 <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
for (i in 1:npid){
u[i,1]~dnorm(zero,1/sigma*sigma) #precision matrix
}
sigma~dunif(0,10)
}
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jags
dimnames(jagsdataSMSC)<-lis("Nobservations","outcome","npid","subj")
dimnames(jagsdataSMSC)<-list("Nobservations","outcome","npid","subj")
dimnames(jagsdataSMSC)<-list(c("Nobservations","outcome","npid","subj"))
dimnames(jagsdataSMSC)[[1]]
dimnames(jagsdataSMSC)[[1]]<-list("Nobservations"))
dimnames(jagsdataSMSC)[[1]]<-list("Nobservations")
(dimnames(jagsdataSMSC)[[1]]<-list(c("Nobservations"))
dimnames(jagsdataSMSC)[[1]]<-list(c("Nobservations"))
dimnames(jagsdataSMSC)[[1]]<-list(c("Nobservations"))
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1,
npid=length(unique(SMSCdataC$patient.id)),
subj=as.numeric(factor(SMSCdataC$patient.id))
)
jagsmodelSMSC2 <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[1,1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
for (i in 1:npid){
u[i,1]~dnorm(zero,1/sigma*sigma) #precision matrix
}
sigma~dunif(0,10)
}
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jagsmodelSMSC2 <-function()
{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
for (i in 1:npid){
u[i,1]~dnorm(zero,1/sigma*sigma) #precision matrix
}
sigma~dunif(0,10)
}
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1,
npid=length(unique(SMSCdataC$patient.id)),
subj=as.numeric(factor(SMSCdataC$patient.id))
)
cat("model
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]+u[subj[i],1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
for (i in 1:npid){
u[i,1]~dnorm(zero,1/sigma*sigma) #precision matrix
}
sigma~dunif(0,10)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b[1]'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1,
subj=as.numeric(factor(SMSCdataC$patient.id))
)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1
)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
zero[1]<-0
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.numeric(SMSCdataC$outcome)-1)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
nrow(SMSCdataC)
as.numeric(SMSCdataC$outcome)-1)
as.numeric(SMSCdataC$outcome)-1
as.factor(SMSCdataC$outcome)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.factor(SMSCdataC$outcome)
)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
View(SMSCdataC)
View(SMSCdataC)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=SMSCdataC$relapse.2y.after.study
)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
as.numeric(SMSCdataC$relapse.2y.after.study)
SMSCdataC$relapse.2y.after.study
as.factor(SMSCdataC$relapse.2y.after.study)
)
as.factor(SMSCdataC$relapse.2y.after.study)
jagsdataSMSC <- list(
Nobservations=nrow(SMSCdataC),
outcome=as.factor(SMSCdataC$relapse.2y.after.study)
)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b[1]
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b[1]~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
View(SMSCdataC)
View(SMSCdataC)
table(SMSCdataC$outcome)
table(SMSCdataC$relapse.2y.after.study)
# run the jugs model
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'),model.file = jagsmodelSMSC2,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(metafor)
library(meta)
library(netmeta)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
source("R/numericalDataRisk.fun.R")
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
MSrelapse<-na.omit(MSrelapse)
jagsdataSMSC <- list(
Nobservations=nrow(MSrelapse),
outcome=as.factor(MSrelapse$RELAPSE2year)
)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
View(MSrelapse)
View(MSrelapse)
as.numeric(MSrelapse$RELAPSE2year)-1
jagsdataSMSC <- list(
Nobservations=nrow(MSrelapse),
outcome=as.numeric(MSrelapse$RELAPSE2year)-1
)
cat("model{
for( i in 1:Nobservations)
{
outcome[i]~dbern(p[i])
#likelihood
logit(p[i])<-b
}
#priors for fixed effects for b[i] (fixef intercept and slopes)
b~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, and make data for jags model etc.
source('DataForIPDNMR.R')
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
source("R/RiskModels.fun.R")
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, and make data for jags model etc.
source('DataForIPDNMR.R')
source("R/modelIPDNMR.R") #source the model will be used for rjags
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSresultsLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
N=nrow(MSrelapse),
outcome=as.numeric(MSrelapse$RELAPSE2year)-1
)
cat("model{
for( i in 1:N)
{
outcome[i]~dbern(pl[i])
logit(pl[i])<-logitb
}
logitb~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
N=nrow(MSrelapse),
outcome=as.numeric(MSrelapse$RELAPSE2year)-1
)
cat("model{
for( i in 1:N)
{
outcome[i]~dbern(pl[i])
logit(pl[i])<-logitb
}
logitb~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('logitb'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
nrow(MSrelapse)
jagsdataSMSC <- list(
N=nrow(MSrelapse),
outcome=as.numeric(MSrelapse$RELAPSE2year)-1
)
cat("model{
for( i in 1:N)
{
outcome[i]~dbern(pl[i])
logit(pl[i])<-bo
}
bo~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('logitb'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
N=nrow(MSrelapse),
outcome=as.numeric(MSrelapse$RELAPSE2year)-1
)
cat("model{
for( i in 1:N)
{
outcome[i]~dbern(pl[i])
logit(pl[i])<-bo
}
bo~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('bo'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
jagsdataSMSC <- list(
N=nrow(MSrelapse),
outcome=as.numeric(MSrelapse$RELAPSE2year)-1
)
cat("model{
for( i in 1:N)
{
outcome[i]~dbern(pl[i])
logit(pl[i])<-b0
}
b0~dnorm(0,0.001)
}", file="logisticgr.jags")
SMSCjagsResults <- jags(data = jagsdataSMSC ,inits=NULL,parameters.to.save = c('b0'), model.file ="logisticgr.jags" ,
n.chains=2,n.iter = 1000,n.burnin = 100,DIC=F,n.thin = 10)
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSresultsLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
SMSCdataC
SMSCdata_fake<-data.frame(sample(SMSCdataC$outcome), sample(SMSCdataC$age), sample(SMSCdataC$patient.id), sample(SMSCdata$gender))
SMSCdata_fake<-data.frame(sample(SMSCdataC$outcome), sample(SMSCdataC$age), sample(SMSCdataC$patient.id), sample(SMSCdataC$gender))
SMSCdata_fake
head(SMSCdata_fake)
head(SMSCdataC)
head(SMSCdata_fake)
head(SMSCdataC[,c("outcome","age","patient.id","gender")])
head(SMSCdata_fake)
View(SMSCdataC)
View(SMSCdataC)
SMSCdata_fake<-data.frame(sample(SMSCdataC$outcome), sample(SMSCdataC$age), sample(SMSCdataC$patient.id), sample(SMSCdataC$gender), sample(SMSCdataC$unique.visit.id))
head(SMSCdata_fake)
write.csv(SMSCdata_fake, "C:/Users/kc19o338/Desktop/SMSC Basel")
