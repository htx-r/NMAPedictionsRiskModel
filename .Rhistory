}
#####treatment effects - fixed across studies & correction for multi-arm studies
for(i in 1:N.IPD.studies){
d[i,1] <- 0
w[i,1] <- 0
for(k in 2:na[i]){
d[i,k]<-md[i, k]
md[i, k] <- mean[i, k] + sw[i, k]
w[i, k] <- (d[i, k] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
mean[i, k] <- delta[treat[i, k]] - delta[treat[i, 1]]
}
}
##Part II: Model for AD data
for(i in (N.IPD.studies+1):(N.AD.studies +N.IPD.studies)){
d[i,treat[i,1] ]<- 0
w[i,1] <- 0
### formula for study's reference
logit(pa[i, treat[i,1] ])<-u[i]
for (k in 1:na[i]){
##likelihood
outcome.ad[i,treat[i,k]]~dbin(pa[i,treat[i,k]], n[i,treat[i,k]])
}
for(k in 2:na[i]){
### formula - fixed across studies
logit(pa[i, treat[i,k] ])<-u[i] + d[i, treat[i,k]]
d[i, treat[i,k]]<-md.ad [i, treat[i,k]]
md.ad[i, treat[i,k]]<- mean[i, k] + sw[i, k]
w[i, k] <- (d[i, treat[i, k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
mean[i, k] <- delta[treat[i, k]] - delta[treat[i, 1]]
}
}
####PART III: Model for combining all treatment effect estimates
#Vague priors
##independent ui for each study
for (i in 1:(N.IPD.studies+N.AD.studies)){
u[i]~dnorm(0,0.001)
}
delta[ref]<-0
for(k in 1:(ref-1)){
delta[k]~dnorm(0,0.001)
}
for(k in (ref+1):nt){
delta[k]~dnorm(0,0.001)
}
###Calculation of ORs
for(j in 1:nt){ORref[j]<- exp(delta[j] - delta[ref])}
}
#### Aggregated data
MS <- read_excel("C:/Users/kc19o338/articles/TracemereADMS/MS replication/MS.xlsx")
MS <- as.data.frame(MS)
ADdata<-MS[which(MS$study=="Bornstein" | MS$study=="Johnson"),]
######DATA
## arm column
RiskData$arm<-NA
RiskData$arm[RiskData$STUDYID==1 & RiskData$TRT01A==1]<-1
RiskData$arm[RiskData$STUDYID==1 & RiskData$TRT01A==4]<-2
RiskData$arm[RiskData$STUDYID==2 & RiskData$TRT01A==1]<-1
RiskData$arm[RiskData$STUDYID==2 & RiskData$TRT01A==2]<-2
RiskData$arm[RiskData$STUDYID==2 & RiskData$TRT01A==4]<-3
RiskData$arm[RiskData$STUDYID==3 & RiskData$TRT01A==3]<-1
RiskData$arm[RiskData$STUDYID==3 & RiskData$TRT01A==4]<-2
ADdata$treat[which(ADdata$treat=="Placebo")]<-4
ADdata$treat[which(ADdata$treat=="Glatiramer acetate")]<-2
ADdata$id<-c(4,4,5,5)
jagsdataIPDADnetmeta <- list(
N.IPD.studies=3,
Np=sum(as.numeric(table(as.numeric(as.factor(RiskData$STUDYID))))),
studyid=as.numeric(as.factor(RiskData$STUDYID)),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA), c(2,4,NA),c(2,4,NA)),
na=c(2,3,2,2,2),
arm=RiskData$arm,
ref=4,
nt=4,
N.AD.studies=2,
outcome.ad=rbind(c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,11,NA,19),c(NA,89,NA,97)),
n=rbind(c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,25,NA,25),c(NA,125,NA,126)),
Risk=RiskData$logitRiskFabio
)
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADnetmeta ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
IPDADnetmetaJAGSmodel
jagsdataIPDADnetmeta <- list(
N.IPD.studies=3,
Np=sum(as.numeric(table(as.numeric(as.factor(RiskData$STUDYID))))),
studyid=as.numeric(as.factor(RiskData$STUDYID)),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA), c(4,2,NA),c(4,2,NA)),
na=c(2,3,2,2,2),
arm=RiskData$arm,
ref=4,
nt=4,
N.AD.studies=2,
outcome.ad=rbind(c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,11,NA,19),c(NA,89,NA,97)),
n=rbind(c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,25,NA,25),c(NA,125,NA,126)),
Risk=RiskData$logitRiskFabio
)
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADnetmeta ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
IPDADnetmetaJAGSmodel
jagsdataIPDADnetmeta <- list(
N.IPD.studies=3,
Np=sum(as.numeric(table(as.numeric(as.factor(RiskData$STUDYID))))),
studyid=as.numeric(as.factor(RiskData$STUDYID)),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA), c(2,4,NA),c(2,4,NA)),
na=c(2,3,2,2,2),
arm=RiskData$arm,
ref=4,
nt=4,
N.AD.studies=2,
outcome.ad=rbind(c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,11,NA,19),c(NA,89,NA,97)),
n=rbind(c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,NA,NA,NA),c(NA,25,NA,25),c(NA,125,NA,126)),
Risk=RiskData$logitRiskFabio
)
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADnetmeta ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
IPDADnetmetaJAGSmodel
29/25
19/25
log(0.76/(1-0.76))
97/126
table(RiskData$RLPS1YR(which(RiskData$STUDYID==1))
)
RiskData(which(RiskData$STUDYID==1))
RiskData[which(RiskData$STUDYID==1),]
93/172
log(0.54/(1-0.54))
#########################   END    #################################################################
rm(list=ls())
## We check the NMA model for IPD and AD
source('DataForIPDADNMA')
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(R2jags)
library(CleaningData)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, etc.
source('DataForIPDNMR.R')
#Step 3. Plot of IPD NMR with both models
source('GraphForPredictedRisk.R')
## We check the NMA model for IPD and AD
source('DataForIPDADNMA')
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADnetmeta ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#traceplot
traceplot(IPDADnetmetaJAGSmodel)
#results
IPDADnetmetaJAGSmodel
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA')
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(dplyr)
library(R2jags)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 3. Plot of IPD NMR with both models
source('GraphForPredictedRisk.R')
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA')
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA.R')
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADnetmeta ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADnetmeta ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
modelIPDADNMA<-function(){
#############Part I: model for IPD data
for (i in 1:Np){
outcome[i]~dbern(p[i])
###formula
logit(p[i])<-u[studyid[i]] + d[studyid[i], arm[i]]
}
#####treatment effects - fixed across studies & correction for multi-arm studies
for(i in 1:N.IPD.studies){
d[i,1] <- 0
w[i,1] <- 0
for(k in 2:na[i]){
d[i,k]<-md[i, k]
md[i, k] <- mean[i, k] + sw[i, k]
w[i, k] <- (d[i, k] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
mean[i, k] <- delta[treat[i, k]] - delta[treat[i, 1]]
}
}
##Part II: Model for AD data
for(i in (N.IPD.studies+1):(N.AD.studies +N.IPD.studies)){
d[i,treat[i,1] ]<- 0
w[i,1] <- 0
### formula for study's reference
logit(pa[i, treat[i,1] ])<-u[i]
for (k in 1:na[i]){
##likelihood
outcome.ad[i,treat[i,k]]~dbin(pa[i,treat[i,k]], n[i,treat[i,k]])
}
for(k in 2:na[i]){
### formula - fixed across studies
logit(pa[i, treat[i,k] ])<-u[i] + d[i, treat[i,k]]
d[i, treat[i,k]]<-md.ad [i, treat[i,k]]
md.ad[i, treat[i,k]]<- mean[i, k] + sw[i, k]
w[i, k] <- (d[i, treat[i, k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
mean[i, k] <- delta[treat[i, k]] - delta[treat[i, 1]]
}
}
####PART III: Model for combining all treatment effect estimates
#Vague priors
##independent ui for each study
for (i in 1:(N.IPD.studies+N.AD.studies)){
u[i]~dnorm(0,0.001)
}
delta[ref]<-0
for(k in 1:(ref-1)){
delta[k]~dnorm(0,0.001)
}
for(k in (ref+1):nt){
delta[k]~dnorm(0,0.001)
}
###Calculation of ORs
for(j in 1:nt){ORref[j]<- exp(delta[j] - delta[ref])}
}
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADnetmeta ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#traceplot
traceplot(IPDADnetmetaJAGSmodel)
#results
IPDADnetmetaJAGSmodel
#########################   END    #################################################################
rm(list=ls())
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(metafor)
library(meta)
library(netmeta)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, etc.
source('DataForIPDNMR.R')
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA.R')
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file = modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA.R,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#check the results with netmeta
source('CheckNMA.R')
summary(net1, digits = 2)
forest(net1,ref=4,fontsize=10)
################################################## B. NMR model with only prognostic factor #################################################################
# Here we make the jagsdata
source('DataForIPDADNMRPr.R')
################################################## B. NMR model with only prognostic factor #################################################################
# Here we make the jagsdata
source('DataForIPDADNMRPr.R')
################################################## B. NMR model with only prognostic factor #################################################################
# Here we make the jagsdata
source('DataForIPDADNMRPr.R')
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADNMRPr ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma'),model.file = modelIPDADNMRPr,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#check the results with IPD NMR model
source('CheckNMRPr.R')
#check the results with IPD NMR model
source('CheckNMRPr.R')
################################### C. NMR model with Risk as prognostic factor and only within effect modifier #################################################################
# Here we make the jagsdata
source('DataForIPDADNMREMwithin.R')
################################### C. NMR model with Risk as prognostic factor and only within effect modifier #################################################################
# Here we make the jagsdata
source('DataForIPDADNMREMwithin.R')
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data =jagsdataIPDADNMREMwithin ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.w'),model.file = modelIPDADNMRgwithinonly,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#check the results with the corresponding IPD NMR model
source('CheckNMREMwithin.R')
#check the results with the corresponding IPD NMR model
source('CheckNMREMwithin.R')
################################### D. NMR model AD and IPD #################################################################
# Here we make the jagsdata
source('DataForIPDADNMR.R')
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADNMR ,inits=NULL,parameters.to.save = c('delta','u','ORref','gamma','gamma.b','gamma.w'),model.file = modelIPDADNMR,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(metafor)
library(meta)
library(netmeta)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
RCTs0<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(RCTs)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
# Here we load th AD, make proper arms in IPD data and make the jagsdata
source('DataForIPDADNMA.R')
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
####RUN the model
IPDADnetmetaJAGSmodel <- jags.parallel(data = jagsdataIPDADNMA ,inits=NULL,parameters.to.save = c('delta','u','ORref'),model.file =modelIPDADNMA,
n.chains=2,n.iter = 10000,n.burnin = 100,DIC=F,n.thin = 1)
source("modelIPDADNMA.R")
source("modelIPDADNMA")
source('modelIPDADNMA.R')
modelIPDADNMA()
#########################   END    #################################################################
rm(list=ls())
