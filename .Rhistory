paste("LASSO table", Table_LASSOModel)
Table_LASSOModel
print(c("LASSO table", Table_LASSOModel))
print("LASSO table")
#Table 2
sink("Table 1.txt")
print("LASSO Model")
Table_LASSOModel
print("Pre-Specified Model")
Table_PreSpecifiedModel
sink()
#Table 1
sink("Table 1.txt")
print("AFFIRM study")
AFFIRM
print("CONFIRM study")
CONFIRM
print("DEFINE study")
DEFINE
print("Placebo single-arm study")
Placebo
sink()
#Table 3
sink("Table 3.txt")
IPDNMR_Table
sink()
#Table 4
##predicted probabilities to relapse in 2 years
sink("Table 4.txt")
print("PREDICTED PROBABILITY TO RELAPSE IN TWO YEARS")
print("LASSO model")
LASSOtable #for LASSO model
print("Pre-Specified model")
PreSpecifiedtable #for pre-specified model
###ORs of relapsing in 2 years
print("ORs OF RELAPSING IN TWO YEARS")
print("LASSO model")
LASSOtableOR #for LASSO model
print("Pre-Specified model")
PreSpecifiedtableOR #for pre-specified model
sink()
#Table 4
##predicted probabilities to relapse in 2 years
round(LASSOtable,2) #for LASSO model
round(PreSpecifiedtable,2) #for pre-specified model
###ORs of relapsing in 2 years
round(LASSOtableOR,2) #for LASSO model
round(PreSpecifiedtableOR,2) #for pre-specified model
#Table 4
##predicted probabilities to relapse in 2 years
round(LASSOtable,0) #for LASSO model
#Table 4
##predicted probabilities to relapse in 2 years
sink("Table 4.txt")
print("PREDICTED PROBABILITIES TO RELAPSE IN TWO YEARS")
print("LASSO model")
round(LASSOtable,0) #for LASSO model
print("Pre-Specified model")
round(PreSpecifiedtable,0) #for pre-specified model
###ORs of relapsing in 2 years
print("ORs OF RELAPSING IN TWO YEARS")
print("LASSO model")
round(LASSOtableOR,2) #for LASSO model
print("Pre-Specified model")
round(PreSpecifiedtableOR,2) #for pre-specified model
sink()
#########################   END    #################################################################
rm(list=ls())
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data cleaning"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
adsl01<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
adsl<-adsl01[adsl01$STUDYID!="SENTINEL" & adsl01$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(adsl)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 3. Bootstrap calibration and discrimination by using the same bootstrap sample for two models each time
###needs more than 3 hours to run! You can skip it without any problem further
###Performance table of models : discrimination and calibration
data1<-na.omit(MSrelapse)
todrop<-c("STUDYID","USUBJID","TRT01A")
data1<-data1[ , !(names(data1) %in% todrop)]
Internal_validation<-BootstrapValidation.fun(data=data1, samples = 500, alpha = 1, modelElasticNet = LASSOModel$lassomodel, modelSpecific = PreSpecifiedModel$PreSpecifiedmodel)
Discrimination_Calibration<-as.data.frame(Internal_validation[[7]])
Discrimination_Calibration### bootstrap optimism corrected discriminatio and calibration of the models
Discrimination_Calibration<-as.data.frame(Internal_validation[[7]])
sink("Bootstrap Calibration and Discrimination of the models.txt")
Discrimination_Calibration### bootstrap optimism corrected discriminatio and calibration of the models
sink()
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
install_github("htx-r/CleaningData",force=TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data cleaning"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
adsl01<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
adsl<-adsl01[adsl01$STUDYID!="SENTINEL" & adsl01$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(adsl)  ##final full dataset
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model with LASSO shrinkage
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pre-specified model using Penalized Maximum Likelihood Estimation for shrinkage
PreSpecifiedModel<-RiskModels.fun(MSrelapse,"PreSpecifiedModel")
#Step 4. Create a dataset that includes Risk's and logit Risk's predictions for each individual and for both models
##Also make treatment and studies numerical values
source("RiskData.R")
#Step 5. Source the script for the plots of risk score
source('Plots.R')
#Step 1.  Add proper columns in the RiskData, like arm, meanRisk, etc.
source('DataForIPDNMR.R')
#Step 2. Run the model & results & check of traceplots
IPDNMRJAGSmodelLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
IPDNMRJAGSmodelPreSpecified <- jags.parallel(data = jagsdataIPDNMRPreSpecified,inits=NULL,parameters.to.save = c('gamma.w', 'logitpplacebo','gamma', 'ORref','delta','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
# Results using LASSO model
print(IPDNMRJAGSmodelLASSO,varname=c("gamma.w","ORref","u","delta"))
# Results using Pellegrini's model
print(IPDNMRJAGSmodelPreSpecified,varname=c("gamma.w","ORref","u","delta"))
jagsdataIPDNMR_PreSpecified_concordance <- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=as.data.frame(RiskData$logitRiskPreSpecified, ncol=1),
logitmeanRisknew=mean(RiskData$logitRiskPreSpecified),
Nnew=nrow(RiskData),
arm=RiskData$arm,
Risk=RiskData$logitRiskPreSpecified,
meanRisk=c(tapply(RiskData$llogitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
nt=4,
ref=4
)
mean(RiskData$logitRiskPreSpecified)
nrow(RiskData)
as.data.frame(RiskData$logitRiskPreSpecified, ncol=1)
tapply(RiskData$llogitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4]
tapply(RiskData$llogitRiskPreSpecified, RiskData$STUDYID, summary)$`1`
tapply(RiskData$llogitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4]
(RiskData$llogitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4]
jagsdataIPDNMRPreSpecified <- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=logitRisknew,
logitmeanRisknew=-0.545,
Nnew=99,
arm=RiskData$arm,
Risk=RiskData$logitRiskPreSpecified,
meanRisk=c(tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
##here is the mean of logit of risk
nt=4,
ref=4
)
jagsdataIPDNMR_PreSpecified_concordance <- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=as.data.frame(RiskData$logitRiskPreSpecified, ncol=1),
logitmeanRisknew=mean(RiskData$logitRiskPreSpecified),
Nnew=nrow(RiskData),
arm=RiskData$arm,
Risk=RiskData$logitRiskPreSpecified,
meanRisk=c(tapply(RiskData$llogitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
nt=4,
ref=4
)
jagsdataIPDNMR_PreSpecified_concordance <- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=as.data.frame(RiskData$logitRiskPreSpecified, ncol=1),
logitmeanRisknew=mean(RiskData$logitRiskPreSpecified),
Nnew=nrow(RiskData),
arm=RiskData$arm,
Risk=RiskData$logitRiskPreSpecified,
meanRisk=c(tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
nt=4,
ref=4
)
jagsdataIPDNMR_PreSpecified_concordance <- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=as.data.frame(RiskData$logitRiskPreSpecified, ncol=1),
logitmeanRisknew=mean(RiskData$logitRiskPreSpecified),
Nnew=nrow(RiskData),
arm=RiskData$arm,
Risk=RiskData$logitRiskPreSpecified,
meanRisk=c(tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
nt=4,
ref=4
)
jagsdataIPDNMR_PreSpecified_concordance <- list(
Nstudies=3,
Np=nrow(RiskData),
studyid=as.numeric(RiskData$STUDYID),
outcome=as.numeric(RiskData$RELAPSE2year)-1,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=as.data.frame(RiskData$logitRiskPreSpecified, ncol=1),
logitmeanRisknew=mean(RiskData$logitRiskPreSpecified),
Nnew=nrow(RiskData),
arm=RiskData$arm,
Risk=RiskData$logitRiskPreSpecified,
meanRisk=c(tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`1`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`2`[4],tapply(RiskData$logitRiskPreSpecified, RiskData$STUDYID, summary)$`3`[4]), ##here is the mean of logit of risk
nt=4,
ref=4
)
#NMR model
IPDNMRJAGSmodel_PreSpecified_concordance <- jags.parallel(data = jagsdataIPDNMR_PreSpecified_concordance,inits=NULL,parameters.to.save = c('logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)
p<-IPDNMRJAGSmodel_PreSpecified_concordance$BUGSoutput$mean$logitp
expit<-function(x) {exp(x)/(1+exp(x))}
p<-expit(IPDNMRJAGSmodelLASSOconcordance$BUGSoutput$mean$logitp)
p<-IPDNMRJAGSmodel_PreSpecified_concordance$BUGSoutput$mean$logitp
expit<-function(x) {exp(x)/(1+exp(x))}
p<-expit(IPDNMRJAGSmodel_PreSpecified_concordance$BUGSoutput$mean$logitp)
p<-as.data.frame(p)
p
colnames(p)<-c("Dimethyl Fumarate","Glatiramer Acetate","Natalizumab","Placebo")
p
## We add the observed outcome for each one of the patients
Relapse2year<-RiskData$RELAPSE2year
Relapse2year<-as.data.frame(Relapse2year)
Data<-cbind(p,Relapse2year)
Relapse2year
Data<-cbind(p,Relapse2year)
Data
benefit<-as.data.frame(Data$Natalizumab-Data$Placebo) #Predicted benefit of Natalizumab vs Placebo
FinalData<-cbind(Data,benefit)
FinalData
benefit<-as.data.frame(Data$Placebo-Data$Natalizumab) #Predicted benefit of Natalizumab vs Placebo
FinalData<-cbind(Data,benefit)
FinalData
benefit<-as.data.frame(Data$Placebo-Data$Natalizumab) #Predicted benefit of Natalizumab vs Placebo
names(benefit)<-c("Benefit")
FinalData<-cbind(Data,benefit)
FinalData
Treatment<-RiskData$TRT01A
Treatment
Treatment<-as.data.frame(RiskData$TRT01A)
Treatment
colnames(Treatment)<-c("Treatment")
FinalData<-cbind(FinalData,Treatment)
FinalData
### Keep only patients under Placebo or Natalizumab (Now we examine only the c-for benefit of Natalizumab)
FinalData<-FinalData[which(FinalData$Treatment==3  | FinalData$Treatment==4),]
FinalData
FinalData[which(FinalData$Treatment==3
),]
##obtain probabilities instead of logit p
p<-IPDNMRJAGSmodel_PreSpecified_concordance$BUGSoutput$mean$logitp
expit<-function(x) {exp(x)/(1+exp(x))}
p<-expit(IPDNMRJAGSmodel_PreSpecified_concordance$BUGSoutput$mean$logitp)
p<-as.data.frame(p) # this is a table with 2000 patients and their probabilities under each one of the treatments
colnames(p)<-c("Dimethyl Fumarate","Glatiramer Acetate","Natalizumab","Placebo")
## We add to the previous table the observed outcome for each one of the patients
Relapse2year<-RiskData$RELAPSE2year
Relapse2year<-as.data.frame(Relapse2year)
Data<-cbind(p,Relapse2year)
## We add a column with the predicted benefit of Natalizumab vs Placebo
benefit<-as.data.frame(Data$Placebo-Data$Natalizumab) #Predicted benefit of Natalizumab vs Placebo
names(benefit)<-c("Benefit")
FinalData<-cbind(Data,benefit)
### We add the column with the actual treatment that each patient was randomized to take
Treatment<-as.data.frame(RiskData$TRT01A)
colnames(Treatment)<-c("Treatment")
FinalData<-cbind(FinalData,Treatment)
FinalData
table(FinalData$Treatment)
### Keep only patients under Placebo or Natalizumab (Now we examine only the c-for benefit of Natalizumab)
#FinalData<-FinalData[which(FinalData$Treatment==3  | FinalData$Treatment==4),]
FinalDataNat<-FinalData[which(FinalData$Treatment==3),]
FinalDataPla<-FinalData[which(FinalData$Treatment==4),]
FinalDataNat
FinalDataPla
nrow(FinalDataNat)
nrow(FinalDataPla)
min(nrow(FinalDataNat),nrow(FinalDataNat))
FinalDataPla<-sample_n(FinalDataPla,min(nrow(FinalDataNat),nrow(FinalDataNat)))
FinalDataPla
## keep equal number of patients in each arm, select randomly from the largest arm as many patients as there are in the
# smallest arm
nrow(FinalDataNat)
nrow(FinalDataNat)
min(nrow(FinalDataNat),nrow(FinalDataNat))
nrow(FinalDataPla)
min(nrow(FinalDataNat),nrow(FinalDataNat))
FinalDataPla<-sample_n(FinalDataPla,min(nrow(FinalDataNat),nrow(FinalDataNat)))
FinalDataPla
# Step 7. Order each arm based on predicted benefits
FinalDataPla<-FinalDataPla[order(FinalDataPla$Benefit),]
FinalDataNat<-FinalDataNat[order(FinalDataNat$Benefit),]
FinalDataPla
FinalDataNat
# Matched patient pair data
x<-data.frame(FinalDataNat$Benefit,FinalDataNat$Relapse2year,FinalDataPla$Benefit,FinalDataPla$Relapse2year)
x
pred.ben.avg<-(FinalDataNat$Benefit+FinalDataPla$Benefit)/2
obs.ben<-as.numeric(FinalDataNat$Relapse2year)-as.numeric(FinalDataPla$Relapse2year)
obs.ben
pred.ben.avg
pred.ben.avg<-as.data.frame((FinalDataNat$Benefit+FinalDataPla$Benefit)/2)
colnames(pred.ben.avg)<-c("AveragePredictedBenefit")
pred.ben.avg
obs.ben<-as.data.frame(as.numeric(FinalDataNat$Relapse2year)-as.numeric(FinalDataPla$Relapse2year)) # -1 , 0, or 1
obs.ben<-as.data.frame(as.numeric(FinalDataNat$Relapse2year)-as.numeric(FinalDataPla$Relapse2year)) # -1 , 0, or 1
colnames(obs.ben)<-c("ObservedBenefit")
x<-as.data.frame(x,pred.ben.avg,obs.ben)
nrow(x)
nrow(pred.ben.avg)
nrow(obs.ben)
x<-as.data.frame(x,pred.ben.avg,obs.ben)
x<-rbind(x,pred.ben.avg,obs.ben)
x<-cbind(x,pred.ben.avg,obs.ben)
x
x<-as.data.frame(cbind(x,pred.ben.avg,obs.ben))
View(x)
View(x)
(0.1921+0.1713)/2
pred.ben.avg<-as.data.frame((FinalDataNat$Benefit+FinalDataPla$Benefit)/2)
colnames(pred.ben.avg)<-c("AveragePredictedBenefit")
obs.ben<-as.data.frame(as.numeric(FinalDataPla$Relapse2year)-as.numeric(FinalDataNat$Relapse2year)) # -1 , 0, or 1
colnames(obs.ben)<-c("ObservedBenefit")
x<-as.data.frame(cbind(x,pred.ben.avg,obs.ben))
# Step 10. Calculate the c-for-benefit
cindex <- rcorr.cens(pred.ben.avg, obs.ben)
c.benefit <- cindex["C Index"][[1]]
# Step 10. Calculate the c-for-benefit
cindex <- rcorr.cens(pred.ben.avg, obs.ben)
length(pred.ben.avg)
length(obs.ben)
# Step 10. Calculate the c-for-benefit
cindex <- rcorr.cens(x$pred.ben.avg, x$obs.ben)
c.benefit <- cindex["C Index"][[1]]
c.benefit.se <- cindex["S.D."][[1]]/2	# The sd of the c-index is half the sd of Dxy
c.benefit
x$pred.ben.avg
pred.ben.avg<-as.data.frame((FinalDataNat$Benefit+FinalDataPla$Benefit)/2)
colnames(pred.ben.avg)<-c("AveragePredictedBenefit")
obs.ben<-as.data.frame(as.numeric(FinalDataPla$Relapse2year)-as.numeric(FinalDataNat$Relapse2year)) # -1 , 0, or 1
colnames(obs.ben)<-c("ObservedBenefit")
x<-as.data.frame(cbind(x,pred.ben.avg,obs.ben))
x
x$obs.ben
x
# Step 10. Calculate the c-for-benefit
cindex <- rcorr.cens(x$AveragePredictedBenefit, x$ObservedBenefit)
c.benefit <- cindex["C Index"][[1]]
c.benefit.se <- cindex["S.D."][[1]]/2	# The sd of the c-index is half the sd of Dxy
c.benefit
# [1] 0.4871		# The c-for-benefit
c.benefit - 1.96*c.benefit.se
# [1] 0.4460425		# The 95% lower bound of the c-for-benefit
c.benefit + 1.96*c.benefit.se
x$AveragePredictedBenefit
x$ObservedBenefit
#########################   END    #################################################################
rm(list=ls())
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(CleaningData)
library(R2jags)
library(glmpath)
library(readxl)
library(NMAPredictionsRiskModel)
library(glmnet)
library(Hmisc)
library(dplyr)
library(car)
library(gridExtra)
library(ggpubr)
library(rms)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
library(DiagrammeR)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data cleaning"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
adsl01<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
adsl<-adsl01[adsl01$STUDYID!="SENTINEL" & adsl01$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(adsl)  ##final full dataset
names(MSrelapse)
source('EPVandSampleSize.R')
names(adsl01)
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(adsl)  ##final full dataset
#########################   END    #################################################################
rm(list=ls())
